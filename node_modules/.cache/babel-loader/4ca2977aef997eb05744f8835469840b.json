{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\Dallas\\\\Desktop\\\\simbull-two\\\\src\\\\components\\\\Holdings\\\\TeamGraph.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { Line } from 'react-chartjs-2';\nimport './TeamCard.css';\nimport moment from 'moment';\n\nconst TeamGraph = props => {\n  _s();\n\n  const t = props.t;\n  const [chartData, setChartData] = useState();\n  const [allLabels, setAllLabels] = useState();\n  const [priceHistory, setPriceHistory] = useState();\n  const [isMobile, setMobile] = useState(window.innerWidth < 768);\n  const prices = [150, 151, 153, 152, 154, 156, 153, 155, 158];\n  const labels = ['01/01', '01/02', '01/03', '01/04', '01/05', '01/06', '01/07', '01/08', '01/09'];\n\n  const updateMedia = () => {\n    setMobile(window.innerWidth < 768);\n  };\n\n  useEffect(() => {\n    window.addEventListener(\"resize\", updateMedia);\n    return () => window.removeEventListener(\"resize\", updateMedia);\n  }); //Get the days into an array\n\n  const getAllDays = x => {\n    const allDays1 = [];\n    const allDaysName1 = [];\n\n    for (let i = x.tenure; i > 0; i--) {\n      let day = moment().subtract(i, 'days');\n      let date = `0${day.date()}`.slice(-2);\n      let month = `0${day.month() + 1}`.slice(-2);\n      let year = day.year();\n      allDays1.push(`${year}${month}${date}`);\n      allDaysName1.push(`${month}/${date}`);\n    }\n\n    return allDays1, allDaysName1;\n  };\n\n  useEffect(() => {\n    let allDays;\n    let allDaysName;\n    let priceHistory1;\n\n    if (props.t) {\n      let days = getAllDays(t);\n      allDays = days.allDays1;\n      allDaysName = days.allDaysName1;\n      allDays && allDays.map(d => {\n        priceHistory1.push(props.t.prices[d] ? props.t.prices[d].toFixed(2) : props.t.prices[d]);\n      });\n      setPriceHistory(priceHistory1);\n      setAllLabels(allDaysName);\n    }\n  }, [props]);\n\n  const chart = () => {\n    setChartData({\n      labels: allLabels,\n      datasets: [{\n        fill: false,\n        lineTension: 0.5,\n        backgroundColor: '#c5b358',\n        borderColor: '#c5b358',\n        borderWidth: 3,\n        data: priceHistory,\n        yAxisID: 'price1'\n      }]\n    });\n  };\n\n  useEffect(() => {\n    chart();\n  }, [props]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Line, {\n      data: chartData,\n      options: {\n        title: {\n          display: false,\n          text: ' ',\n          fontSize: 20\n        },\n        legend: {\n          display: false\n        },\n        layout: {\n          padding: {\n            left: 20,\n            right: 20,\n            top: 20,\n            bottom: 20\n          }\n        },\n        elements: {\n          point: {\n            radius: 0\n          }\n        },\n        scales: {\n          yAxes: [{\n            display: isMobile ? false : true,\n            position: 'right',\n            id: 'price1'\n          }],\n          xAxes: [{\n            display: false\n          }]\n        } //tooltips: {\n        //    mode: 'nearest',\n        //    intersect: false\n        // },\n        // hover: {\n        //    mode: 'index',\n        //    intersect: false\n        //}\n\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 5\n  }, this);\n};\n\n_s(TeamGraph, \"9zU7ikPWxwQLal8p11W3+nMNMPo=\");\n\n_c = TeamGraph;\nexport default TeamGraph;\n\nvar _c;\n\n$RefreshReg$(_c, \"TeamGraph\");","map":{"version":3,"sources":["C:/Users/Dallas/Desktop/simbull-two/src/components/Holdings/TeamGraph.js"],"names":["React","useState","useEffect","Line","moment","TeamGraph","props","t","chartData","setChartData","allLabels","setAllLabels","priceHistory","setPriceHistory","isMobile","setMobile","window","innerWidth","prices","labels","updateMedia","addEventListener","removeEventListener","getAllDays","x","allDays1","allDaysName1","i","tenure","day","subtract","date","slice","month","year","push","allDays","allDaysName","priceHistory1","days","map","d","toFixed","chart","datasets","fill","lineTension","backgroundColor","borderColor","borderWidth","data","yAxisID","title","display","text","fontSize","legend","layout","padding","left","right","top","bottom","elements","point","radius","scales","yAxes","position","id","xAxes"],"mappings":"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","sourcesContent":["\r\nimport React, {useState, useEffect} from 'react';\r\nimport {Line} from 'react-chartjs-2';\r\nimport './TeamCard.css'\r\nimport moment from 'moment'\r\n\r\n\r\n\r\nconst TeamGraph = (props) => {\r\n  const t = props.t\r\n  const [chartData, setChartData] = useState()\r\n  const [allLabels, setAllLabels] = useState()\r\n  const [priceHistory, setPriceHistory] = useState()\r\n\r\n  const [isMobile, setMobile] = useState(window.innerWidth < 768);\r\n\r\n  const prices = [150, 151, 153, 152, 154, 156, 153, 155, 158]\r\n  const labels = ['01/01','01/02','01/03','01/04','01/05','01/06','01/07','01/08','01/09',]\r\n\r\n  const updateMedia = () => {\r\n    setMobile(window.innerWidth < 768);\r\n  };\r\n\r\n  useEffect(() => {\r\n    window.addEventListener(\"resize\", updateMedia);\r\n    return () => window.removeEventListener(\"resize\", updateMedia);\r\n  });\r\n\r\n  //Get the days into an array\r\n  const getAllDays = (x) => {\r\n    const allDays1 = []\r\n    const allDaysName1 = []\r\n    for(let i = x.tenure; i>0; i--){\r\n        let day = moment().subtract(i, 'days');\r\n        let date = (`0${day.date()}`).slice(-2)\r\n        let month = (`0${day.month()+1}`).slice(-2)\r\n        let year = day.year()\r\n        allDays1.push(`${year}${month}${date}`)\r\n        allDaysName1.push(`${month}/${date}`)\r\n    }\r\n    return allDays1, allDaysName1      \r\n  }\r\n  \r\n  useEffect(()=>{\r\n    let allDays\r\n    let allDaysName\r\n    let priceHistory1\r\n    if(props.t){\r\n      let days = getAllDays(t)\r\n      allDays = days.allDays1\r\n      allDaysName = days.allDaysName1\r\n      allDays && allDays.map(d => {\r\n        priceHistory1.push(props.t.prices[d] ? props.t.prices[d].toFixed(2) : props.t.prices[d])\r\n      })\r\n      setPriceHistory(priceHistory1)\r\n      setAllLabels(allDaysName)\r\n    }\r\n  }, [props])\r\n\r\n  const chart = () => {\r\n    setChartData({\r\n      labels: allLabels,\r\n      datasets: [\r\n        {\r\n          fill: false,\r\n          lineTension: 0.5,\r\n          backgroundColor: '#c5b358',\r\n          borderColor: '#c5b358',\r\n          borderWidth: 3,\r\n          data: priceHistory,\r\n          yAxisID: 'price1'\r\n        },\r\n      ]\r\n    })\r\n  }\r\n  useEffect(() => {\r\n    chart()\r\n  }, [props])\r\n\r\n  return (\r\n    <div>\r\n      <Line\r\n        data={chartData}\r\n        options={{\r\n          title:{\r\n            display:false,\r\n            text:' ',\r\n            fontSize:20\r\n          },\r\n          legend:{\r\n              display: false\r\n          },\r\n          layout: {\r\n              padding: {\r\n                  left: 20,\r\n                  right: 20,\r\n                  top: 20,\r\n                  bottom: 20\r\n              }\r\n          },\r\n          elements: {\r\n              point: {\r\n                  radius: 0\r\n              }\r\n          },\r\n          scales:\r\n          {\r\n              yAxes: [{\r\n                display : isMobile ? false : true,\r\n                position: 'right',\r\n                id: 'price1',\r\n              }],\r\n              xAxes: [{\r\n                  display : false\r\n              \r\n          }]\r\n          },\r\n          //tooltips: {\r\n          //    mode: 'nearest',\r\n          //    intersect: false\r\n          // },\r\n          // hover: {\r\n          //    mode: 'index',\r\n          //    intersect: false\r\n          //}\r\n        }}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default TeamGraph\r\n"]},"metadata":{},"sourceType":"module"}